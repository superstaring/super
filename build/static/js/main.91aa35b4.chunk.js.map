{"version":3,"sources":["components/UsePointHook.ts","components/Point.ts","components/Canvas.tsx","components/PointContent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Point","x","y","radius","color","act","Object","classCallCheck","this","deltaX","deltaY","colorFun","r","Math","floor","random","g","b","toString","length","pointArr","i","point","push","PointContainer","createContainer","_useState","useState","_useState2","slicedToArray","show","setShow","_useState3","_useState4","cir","setCir","Div","styled","div","_templateObject","rotate","keyframes","_templateObject2","pCss","css","_templateObject3","P","p","_templateObject4","props","Canvas","_PointContainer$useCo","useContainer","useEffect","react_default","a","createElement","map","index","key","onClick","arr","concat","toConsumableArray","slice","move","changeColor","changeRadius","changeAct","beginArr","setTimeout","console","log","Button","button","PointContent_templateObject","PointContent","Fragment","App","components_UsePointHook","Provider","className","components_PointContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91aa35b4.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { createContainer } from \"unstated-next\";\r\nimport Point from \"./Point\";\r\n\r\nconst colorFun = () => {\r\n  var r = Math.floor(Math.random() * 256);\r\n  var g = Math.floor(Math.random() * 256);\r\n  var b = Math.floor(Math.random() * 256);\r\n  var color = \"#\" + r.toString(16) + g.toString(16) + b.toString(16);\r\n  var colorNew = color.length === 7 ? color : color + \"0\";\r\n  return colorNew;\r\n};\r\n\r\nconst pointArr: Array<any> = [];\r\n\r\nfor (var i = 0; i < 100; i++) {\r\n  const point: any = new Point(\r\n    Math.random() * (587 + 1 - 0) + 0,\r\n    Math.random() * (587 + 1 - 0) + 0,\r\n    5,\r\n    colorFun()\r\n  );\r\n  pointArr.push(point);\r\n}\r\n\r\nfunction UsePointHook() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const [cir, setCir] = useState([\r\n    { x: 0, y: 0, radius: 5, color: \"red\", act: false }\r\n  ]);\r\n\r\n  return { show, setShow, cir, setCir, pointArr };\r\n}\r\n\r\nconst PointContainer = createContainer(UsePointHook);\r\n\r\nexport default PointContainer;\r\n","class Point {\r\n  public readonly x: number;\r\n  public readonly y: number;\r\n  public readonly radius: number;\r\n  public readonly color: string;\r\n  public readonly act?: boolean;\r\n\r\n  public constructor(\r\n    x: number,\r\n    y: number,\r\n    radius: number,\r\n    color: string,\r\n    act?: boolean\r\n  ) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n    this.act = act;\r\n  }\r\n\r\n  public move(deltaX: number, deltaY: number) {\r\n    const x = this.x + deltaX + this.radius < 558 ? this.x + deltaX : 558;\r\n    const y = this.y + deltaY + this.radius < 558 ? this.y + deltaY : 558;\r\n    return new Point(x, y, this.radius, this.color);\r\n  }\r\n\r\n  public changeColor(color: string) {\r\n    return new Point(this.x, this.y, this.radius, color);\r\n  }\r\n\r\n  public changeRadius(radius: number) {\r\n    return new Point(this.x, this.y, radius, this.color);\r\n  }\r\n\r\n  public changeAct(act: boolean) {\r\n    return new Point(this.x, this.y, this.radius, this.color, act);\r\n  }\r\n}\r\n\r\nexport default Point;\r\n","import React, { useEffect } from \"react\";\r\nimport styled, { css, keyframes } from \"styled-components\";\r\nimport PointContainer from \"./UsePointHook\";\r\nimport Props from \"./pointType\";\r\n\r\nconst Div = styled.div`\r\n  width: 598px;\r\n  height: 598px;\r\n  margin: 10px auto;\r\n  position: relative;\r\n  border: 1px solid #eee;\r\n`;\r\n\r\nconst rotate = keyframes`\r\n  0% {\r\n    transform: rotate(0deg);\r\n    opacity: 0.2;\r\n  }\r\n\r\n\r\n  50% {\r\n    transform: rotate(180deg);\r\n    opacity: 0.6;\r\n  }\r\n\r\n  100% {\r\n    transform: rotate(360deg);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst pCss = css`\r\n  animation: ${rotate} 2s linear infinite;\r\n`;\r\n\r\nconst P = styled.p`\r\n  position: absolute;\r\n  width: ${(props: Props) => props.point.radius * 2}px;\r\n  height: ${(props: Props) => props.point.radius * 2}px;\r\n  border-radius: ${(props: Props) => props.point.radius * 4}px;\r\n  background: ${(props: Props) => props.point.color};\r\n  left: ${(props: Props) => props.point.x}px;\r\n  top: ${(props: Props) => props.point.y}px;\r\n  margin: 0;\r\n  ${(props: Props) => props.point.act && pCss};\r\n`;\r\n\r\nconst colorFun = () => {\r\n  var r = Math.floor(Math.random() * 256);\r\n  var g = Math.floor(Math.random() * 256);\r\n  var b = Math.floor(Math.random() * 256);\r\n  var color = \"#\" + r.toString(16) + g.toString(16) + b.toString(16);\r\n  var colorNew = color.length === 7 ? color : color + \"0\";\r\n  return colorNew;\r\n};\r\n\r\nexport default function Canvas() {\r\n  const { cir, setCir, pointArr } = PointContainer.useContainer();\r\n\r\n  useEffect(() => {\r\n    setCir(pointArr);\r\n  }, [pointArr]);\r\n\r\n  const onClick = (point: any, index: number) => {\r\n    const arr = [\r\n      ...cir.slice(0, index),\r\n      point\r\n        .move(\r\n          Math.floor(Math.random() * 21 + 4),\r\n          Math.floor(Math.random() * 21 + 4)\r\n        )\r\n        .changeColor(colorFun())\r\n        .changeRadius(Math.floor(Math.random() * 17 + 4))\r\n        .changeAct(false),\r\n\r\n      ...cir.slice(index + 1)\r\n    ];\r\n\r\n    const beginArr = [\r\n      ...cir.slice(0, index),\r\n      point.changeAct(true),\r\n      ...cir.slice(index + 1)\r\n    ];\r\n\r\n    setCir(beginArr);\r\n\r\n    setTimeout(() => {\r\n      setCir(arr);\r\n    }, 1500);\r\n\r\n    console.log(arr);\r\n  };\r\n\r\n  return (\r\n    <Div>\r\n      {cir.map((point: any, index: number) => (\r\n        <P key={index} point={point} onClick={() => onClick(point, index)} />\r\n      ))}\r\n    </Div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PointContainer from \"./UsePointHook\";\r\nimport Canvas from \"./Canvas\";\r\n\r\nconst Button = styled.button`\r\n  border: 1px solid #eee;\r\n  cursor: pointer;\r\n  background: #fff;\r\n  min-width: 100px;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  margin: 5px auto;\r\n`;\r\n\r\nfunction PointContent() {\r\n  const { show, setShow } = PointContainer.useContainer();\r\n\r\n  const onClick = () => {\r\n    setShow(!show);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={onClick}>按钮</Button>\r\n      {show && <Canvas />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PointContent;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PointContent from './components/PointContent';\r\nimport PointContainer from './components/UsePointHook';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <PointContainer.Provider>\r\n    <div className=\"App\">\r\n     <PointContent />\r\n    </div>\r\n    </PointContainer.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}